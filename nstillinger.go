package main

import (
	"encoding/json"
	"flag"
	"log"
	"net/http"
	"sync"
	"time"
)

// Antall ... Resultatstrukturen til grensesnittet
type Antall struct {
	Stillinger int `json:"stillinger"`
	Annonser   int `json:"annonser"`
	Nye        int `json:"nye"`
}

var antallStillinger Antall
var mutex = &sync.Mutex{}

func hentAntall() Antall {

	// Generert fra eksempel-resultat
	// Slettet en del overflødig fra resultatet.
	// https://mholt.github.io/json-to-go/
	type AutoGenerated struct {
		Took     int  `json:"took"`
		TimedOut bool `json:"timed_out"`
		Shards   struct {
			Total      int `json:"total"`
			Successful int `json:"successful"`
			Skipped    int `json:"skipped"`
			Failed     int `json:"failed"`
		} `json:"_shards"`
		Hits struct {
			Total    int         `json:"total"`
			MaxScore interface{} `json:"max_score"`
			Hits     []struct {
				Index  string `json:"_index"`
				Type   string `json:"_type"`
				ID     string `json:"_id"`
				Score  int    `json:"_score"`
				Source struct {
					Title      string    `json:"title"`
					UUID       string    `json:"uuid"`
					Updated    time.Time `json:"updated"`
					Properties struct {
						Applicationdue string `json:"applicationdue"`
						Employer       string `json:"employer"`
						Location       string `json:"location"`
					} `json:"properties"`
					Status string `json:"status"`
				} `json:"_source"`
				Sort []interface{} `json:"sort"`
			} `json:"hits"`
		} `json:"hits"`
		Aggregations struct {
			Extent struct {
				Meta struct {
				} `json:"meta"`
				DocCount int `json:"doc_count"`
				Values   struct {
					DocCountErrorUpperBound int `json:"doc_count_error_upper_bound"`
					SumOtherDocCount        int `json:"sum_other_doc_count"`
					Buckets                 []struct {
						Key      string `json:"key"`
						DocCount int    `json:"doc_count"`
					} `json:"buckets"`
				} `json:"values"`
			} `json:"extent"`
			EngagementType struct {
				Meta struct {
				} `json:"meta"`
				DocCount int `json:"doc_count"`
				Values   struct {
					DocCountErrorUpperBound int `json:"doc_count_error_upper_bound"`
					SumOtherDocCount        int `json:"sum_other_doc_count"`
					Buckets                 []struct {
						Key      string `json:"key"`
						DocCount int    `json:"doc_count"`
					} `json:"buckets"`
				} `json:"values"`
			} `json:"engagementType"`
			Countries struct {
				Meta struct {
				} `json:"meta"`
				DocCount int `json:"doc_count"`
				Values   struct {
					DocCountErrorUpperBound int `json:"doc_count_error_upper_bound"`
					SumOtherDocCount        int `json:"sum_other_doc_count"`
					Buckets                 []struct {
						Key      string `json:"key"`
						DocCount int    `json:"doc_count"`
					} `json:"buckets"`
				} `json:"values"`
			} `json:"countries"`
			Counties struct {
				Meta struct {
				} `json:"meta"`
				DocCount int `json:"doc_count"`
				Values   struct {
					DocCountErrorUpperBound int `json:"doc_count_error_upper_bound"`
					SumOtherDocCount        int `json:"sum_other_doc_count"`
					Buckets                 []struct {
						Key        string `json:"key"`
						DocCount   int    `json:"doc_count"`
						Municipals struct {
							DocCountErrorUpperBound int `json:"doc_count_error_upper_bound"`
							SumOtherDocCount        int `json:"sum_other_doc_count"`
							Buckets                 []struct {
								Key      string `json:"key"`
								DocCount int    `json:"doc_count"`
							} `json:"buckets"`
						} `json:"municipals"`
					} `json:"buckets"`
				} `json:"values"`
			} `json:"counties"`
			Published struct {
				Meta struct {
				} `json:"meta"`
				DocCount int `json:"doc_count"`
				Range    struct {
					Buckets []struct {
						Key          string    `json:"key"`
						From         int64     `json:"from"`
						FromAsString time.Time `json:"from_as_string"`
						DocCount     int       `json:"doc_count"`
					} `json:"buckets"`
				} `json:"range"`
			} `json:"published"`
			OccupationFirstLevels struct {
				Meta struct {
				} `json:"meta"`
				DocCount int `json:"doc_count"`
				Values   struct {
					DocCountErrorUpperBound int `json:"doc_count_error_upper_bound"`
					SumOtherDocCount        int `json:"sum_other_doc_count"`
					Buckets                 []struct {
						Key                    string `json:"key"`
						DocCount               int    `json:"doc_count"`
						OccupationSecondLevels struct {
							DocCountErrorUpperBound int `json:"doc_count_error_upper_bound"`
							SumOtherDocCount        int `json:"sum_other_doc_count"`
							Buckets                 []struct {
								Key      string `json:"key"`
								DocCount int    `json:"doc_count"`
							} `json:"buckets"`
						} `json:"occupationSecondLevels"`
					} `json:"buckets"`
				} `json:"values"`
			} `json:"occupationFirstLevels"`
			Sector struct {
				Meta struct {
				} `json:"meta"`
				DocCount int `json:"doc_count"`
				Values   struct {
					DocCountErrorUpperBound int `json:"doc_count_error_upper_bound"`
					SumOtherDocCount        int `json:"sum_other_doc_count"`
					Buckets                 []struct {
						Key      string `json:"key"`
						DocCount int    `json:"doc_count"`
					} `json:"buckets"`
				} `json:"values"`
			} `json:"sector"`
		} `json:"aggregations"`
	}

	tmp := Antall{}

	res, err := http.Get("https://stillingsok.nav.no/api/search")

	if err != nil {
		log.Println("ERROR POST: ", err)
		return tmp
	}

	var body AutoGenerated
	err = json.NewDecoder(res.Body).Decode(&body)
	if err != nil {
		log.Println("ERROR DECODE: ", err)
		return tmp
	}

	// XXX: Vi aggregerer ikke antall stillinger.
	tmp.Annonser = body.Aggregations.Published.DocCount
	tmp.Stillinger = body.Aggregations.Published.DocCount
	if len(body.Aggregations.Published.Range.Buckets) > 0 {
		tmp.Nye = body.Aggregations.Published.Range.Buckets[0].DocCount
	}
	return tmp
}

func stillinger(w http.ResponseWriter, r *http.Request) {
	mutex.Lock()
	tmp := antallStillinger
	mutex.Unlock()
	w.Header().Set("Access-Control-Allow-Origin", "*")
	s, _ := json.Marshal(tmp)
	w.Write(s)
}

func main() {
	var (
		portnummer string
		prefix     string
	)
	flag.StringVar(&portnummer, "p", ":8085", "Hvilket portnummer/adresse")
	flag.StringVar(&prefix, "prefix", "/api", "Løsningens adresse")
	flag.Parse()

	{
		ticker := time.NewTicker(5000 * time.Millisecond)
		go func() {
			for t := range ticker.C {
				tmp := hentAntall()
				mutex.Lock()
				antallStillinger = tmp
				mutex.Unlock()
				log.Println("Oppdaterer ", t)
			}
		}()
	}

	http.HandleFunc(prefix+"/stillinger", stillinger) // set router
	err := http.ListenAndServe(portnummer, nil)       // set listen port
	if err != nil {
		log.Fatal("ERROR:", err)
	}
	log.Println("API stillinger, lytter til adresse  ", portnummer)
}
